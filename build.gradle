plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.sprint'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springAiVersion', "1.0.0-M7")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-batch'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//implementation 'org.springframework.ai:spring-ai-starter-vector-store-mongodb-atlas'

	// cloud - s3
	implementation "io.awspring.cloud:spring-cloud-aws-starter-s3:3.3.0"
	//implementation 'software.amazon.awssdk:s3:2.31.7'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'

	//querydsl
	implementation "com.querydsl:querydsl-jpa:5.0.0:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.batch:spring-batch-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"

	// S3 테스트 컨테이너
	testImplementation "org.testcontainers:testcontainers:1.20.6"
	testImplementation "cloud.localstack:localstack-utils:0.2.23"
	testImplementation "org.testcontainers:junit-jupiter:1.20.6"
	testImplementation "org.testcontainers:localstack:1.20.6"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
}

def querydslDir = "build/generated/querydsl"

tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslDir)
//	options.compilerArgs << "-parameters"
}

clean {
	delete file(querydslDir)
}